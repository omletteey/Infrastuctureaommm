name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Terrafrom/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'Terrafrom/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      cloud_provider:
        description: 'Cloud provider'
        required: true
        default: 'AWS'
        type: choice
        options:
          - AWS
          - AZURE
          - GCP

env:
  TF_VERSION: '1.6.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read
  pull-requests: write
  id-token: write  # Required for OIDC authentication

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud_provider: [AWS, AZURE, GCP]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Comment PR - Validation Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Validation Results for ${{ matrix.cloud_provider }}
            
            #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            
            <details><summary>Show Validation Output</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    strategy:
      matrix:
        cloud_provider: [AWS, AZURE, GCP]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif
          download_external_modules: true
          quiet: true

      - name: Upload Checkov results to GitHub Advanced Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif
          category: checkov-${{ matrix.cloud_provider }}

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}
          format: sarif
          soft_fail: true

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        cloud_provider: [AWS, AZURE, GCP]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Configure cloud provider authentication
      - name: Configure AWS credentials
        if: matrix.cloud_provider == 'AWS'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure Azure credentials
        if: matrix.cloud_provider == 'AZURE'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure GCP credentials
        if: matrix.cloud_provider == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}
        continue-on-error: true

      - name: Save Plan Output
        run: terraform show -no-color tfplan > tfplan.txt
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Comment PR - Plan Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}/tfplan.txt', 'utf8');
            const output = `
            ## Terraform Plan Results for ${{ matrix.cloud_provider }}
            
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}\`, Workflow: \`${{ github.workflow }}\`*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.cloud_provider }}
          path: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}/tfplan
          retention-days: 30

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: PROD
    strategy:
      matrix:
        cloud_provider: [AWS, AZURE, GCP]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Configure cloud provider authentication
      - name: Configure AWS credentials
        if: matrix.cloud_provider == 'AWS'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure Azure credentials
        if: matrix.cloud_provider == 'AZURE'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure GCP credentials
        if: matrix.cloud_provider == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.cloud_provider }}
          path: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Update State Summary
        run: |
          echo "## Terraform Apply Summary for ${{ matrix.cloud_provider }}" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Infrastructure successfully applied" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ Applied at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "üë§ Applied by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  terraform-drift-detection:
    name: 'Drift Detection'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        cloud_provider: [AWS, AZURE, GCP]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Configure cloud provider authentication
      - name: Configure AWS credentials
        if: matrix.cloud_provider == 'AWS'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure Azure credentials
        if: matrix.cloud_provider == 'AZURE'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CRED }}

      - name: Configure GCP credentials
        if: matrix.cloud_provider == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Plan (Drift Check)
        id: drift
        run: terraform plan -detailed-exitcode -no-color
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}
        continue-on-error: true

      - name: Create Issue for Drift
        if: steps.drift.outputs.exitcode == 2
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Infrastructure Drift Detected - ${{ matrix.cloud_provider }}`,
              body: `
              ## üö® Infrastructure Drift Detected
              
              Terraform has detected drift in the ${{ matrix.cloud_provider }} infrastructure.
              
              **Details:**
              - Cloud Provider: ${{ matrix.cloud_provider }}
              - Detection Time: ${new Date().toISOString()}
              - Workflow Run: ${{ github.run_id }}
              
              Please review the changes and take appropriate action.
              `,
              labels: ['infrastructure', 'drift', 'urgent']
            }) 