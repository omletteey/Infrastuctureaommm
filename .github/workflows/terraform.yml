name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Terrafrom/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'Terrafrom/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - PROD
      cloud_provider:
        description: 'Cloud provider'
        required: true
        default: 'AWS'
        type: choice
        options:
          - AWS
          - AZURE
          - GCP

env:
  TF_VERSION: '1.6.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read
  pull-requests: write
  id-token: write  # Required for OIDC authentication

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cloud_provider: [AWS, AZURE, GCP]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Comment PR - Validation Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Validation Results for ${{ matrix.cloud_provider }}
            
            #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            
            <details><summary>Show Validation Output</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'))
    environment: PROD
    strategy:
      fail-fast: false
      matrix:
        cloud_provider: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.cloud_provider)) || fromJson('["AWS", "AZURE", "GCP"]') }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Configure cloud provider authentication
      - name: Configure AWS credentials
        if: matrix.cloud_provider == 'AWS'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: Configure Azure credentials
        if: matrix.cloud_provider == 'AZURE'
        run: |
          echo "ARM_CLIENT_ID=619a1d4f-e512-4f63-80fc-59bb2c3c5af2" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=emm8Q~njY88li8J00-2H~zaCgSjIugxtwnJnDav2" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=f596e25a-399a-4387-baae-3126b8082ca4" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=b912e4ca-2683-4199-9209-f36fe874d46f" >> $GITHUB_ENV

      - name: Configure GCP credentials
        if: matrix.cloud_provider == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        id: init
        run: |
          echo "üîß Initializing Terraform..."
          terraform init
          echo "‚úÖ Terraform initialization completed"
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Plan
        id: plan
        run: |
          echo "üìã Starting Terraform plan..."
          terraform plan -no-color -input=false -out=tfplan
          echo "‚úÖ Terraform plan completed"
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Verify Plan File
        run: |
          if [ ! -f tfplan ]; then
            echo "‚ùå Plan file not generated"
            exit 1
          fi
          echo "‚úÖ Plan file generated successfully"
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Save Plan Output
        run: terraform show -no-color tfplan > tfplan.txt
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Comment PR - Plan Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}/tfplan.txt', 'utf8');
            const output = `
            ## Terraform Plan Results for ${{ matrix.cloud_provider }}
            
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}\`, Workflow: \`${{ github.workflow }}\`*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.cloud_provider }}
          path: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}/tfplan
          retention-days: 30

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: PROD
    strategy:
      fail-fast: false
      matrix:
        cloud_provider: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.cloud_provider)) || fromJson('["AWS", "AZURE", "GCP"]') }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Configure cloud provider authentication
      - name: Configure AWS credentials
        if: matrix.cloud_provider == 'AWS'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: Configure Azure credentials
        if: matrix.cloud_provider == 'AZURE'
        run: |
          echo "ARM_CLIENT_ID=619a1d4f-e512-4f63-80fc-59bb2c3c5af2" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=emm8Q~njY88li8J00-2H~zaCgSjIugxtwnJnDav2" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=f596e25a-399a-4387-baae-3126b8082ca4" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=b912e4ca-2683-4199-9209-f36fe874d46f" >> $GITHUB_ENV

      - name: Configure GCP credentials
        if: matrix.cloud_provider == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.cloud_provider }}
          path: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Verify Downloaded Plan
        run: |
          if [ ! -f tfplan ]; then
            echo "‚ùå Plan file not found after download"
            echo "Contents of current directory:"
            ls -la
            exit 1
          fi
          echo "‚úÖ Plan file found and ready for apply"
          echo "Plan file size: $(du -h tfplan)"
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./Terrafrom/Terrafrom/${{ matrix.cloud_provider }}

      - name: Update State Summary
        run: |
          echo "## Terraform Apply Summary for ${{ matrix.cloud_provider }}" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Infrastructure successfully applied" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ Applied at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "üë§ Applied by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
